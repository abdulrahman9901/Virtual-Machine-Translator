@256
D=A
@SP
M=D
// call Sys.init 0
@Sys.init_1_return_address
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
D=M-D
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Sys.init_1_return_address)
// declare function Sys.init 0
(Sys.init)
@0
D=A
@R10
M=D
@0
D=A
@R12
M=D
@Sys.init_NO_ARGS
D;JEQ
(Sys.init_LCL_INIT)
@R10
D=M
@SP
A=M+D
M=0
@R10
M=M+1
D=M
@R12
D=M-D
@Sys.init_LCL_INIT
D;JGT
@0
D=A
@SP
M=M+D
(Sys.init_NO_ARGS)
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Main.fibonacci 1
@Main.fibonacci_1_return_address
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@1
D=A
@SP
D=M-D
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci_1_return_address)
// label WHILE 
(WHILE)
// goto WHILE 
@WHILE
0;JMP
// declare function Main.fibonacci 0
(Main.fibonacci)
@0
D=A
@R10
M=D
@0
D=A
@R12
M=D
@Main.fibonacci_NO_ARGS
D;JEQ
(Main.fibonacci_LCL_INIT)
@R10
D=M
@SP
A=M+D
M=0
@R10
M=M+1
D=M
@R12
D=M-D
@Main.fibonacci_LCL_INIT
D;JGT
@0
D=A
@SP
M=M+D
(Main.fibonacci_NO_ARGS)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@SP
AM=M-1
D=M-D
@TRUE1
D;JLT
@SP
A=M
M=0
@INSP1
0;JMP
(TRUE1)
@SP
A=M
M=-1
(INSP1)
@SP
M=M+1
// if-goto IF_TRUE 
@SP
AM=M-1
D=M
@IF_TRUE
D;JNE
// goto IF_FALSE 
@IF_FALSE
0;JMP
// label IF_TRUE 
(IF_TRUE)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return from function 
@LCL
D=M
@R11
M=D
@5
D=A
@R11
D=M-D
A=D
D=M
@R9
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R11
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@R11
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@R11
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@R11
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@R9
A=M
0;JMP
// label IF_FALSE 
(IF_FALSE)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
// call Main.fibonacci 1
@Main.fibonacci_2_return_address
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@1
D=A
@SP
D=M-D
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci_2_return_address)
// push argument 0
@ARG
D=M
@0
A=A+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
// call Main.fibonacci 1
@Main.fibonacci_3_return_address
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@1
D=A
@SP
D=M-D
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci_3_return_address)
// add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=D+M
@SP
M=M+1
// return from function 
@LCL
D=M
@R11
M=D
@5
D=A
@R11
D=M-D
A=D
D=M
@R9
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R11
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@R11
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@R11
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@R11
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@R9
A=M
0;JMP
